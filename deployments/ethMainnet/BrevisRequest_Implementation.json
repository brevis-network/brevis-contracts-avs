{
  "address": "0x36d4b89b679D4B5Dd79666002f54cFA3a5b3E571",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeCollector",
          "type": "address"
        },
        {
          "internalType": "contract IBrevisProof",
          "name": "_brevisProof",
          "type": "address"
        },
        {
          "internalType": "contract IBrevisEigen",
          "name": "_brevisEigen",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "enum BrevisRequest.AskForType",
          "name": "askFor",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        }
      ],
      "name": "AskFor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "from",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "to",
          "type": "uint256"
        }
      ],
      "name": "ChallengeWindowUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "FeeCollectorUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32[]",
          "name": "requestIds",
          "type": "bytes32[]"
        },
        {
          "indexed": false,
          "internalType": "bytes[]",
          "name": "queryURLs",
          "type": "bytes[]"
        }
      ],
      "name": "OpRequestsFulfilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        }
      ],
      "name": "ProofPost",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        }
      ],
      "name": "QueryDataPost",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        }
      ],
      "name": "RequestFulfilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        }
      ],
      "name": "RequestRefunded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "contract IBrevisApp",
          "name": "callback",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum BrevisRequest.Option",
          "name": "option",
          "type": "uint8"
        }
      ],
      "name": "RequestSent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "from",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "to",
          "type": "uint256"
        }
      ],
      "name": "RequestTimeoutUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "from",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "to",
          "type": "uint256"
        }
      ],
      "name": "ResponseTimeoutUpdated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "askForProof",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "askForQueryData",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "brevisEigen",
      "outputs": [
        {
          "internalType": "contract IBrevisEigen",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "brevisProof",
      "outputs": [
        {
          "internalType": "contract IBrevisProof",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "challengeQueryData",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "challengeWindow",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "collectFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeCollector",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "_requestIds",
          "type": "bytes32[]"
        },
        {
          "internalType": "bytes[]",
          "name": "_queryURLs",
          "type": "bytes[]"
        }
      ],
      "name": "fulfillOpRequests",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_requestId",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "_chainId",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "_proof",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_appCircuitOutput",
          "type": "bytes"
        }
      ],
      "name": "fulfillRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeCollector",
          "type": "address"
        },
        {
          "internalType": "contract IBrevisProof",
          "name": "_brevisProof",
          "type": "address"
        },
        {
          "internalType": "contract IBrevisEigen",
          "name": "_brevisEigen",
          "type": "address"
        }
      ],
      "name": "init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "keccakToMimc",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "postProof",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "postQueryData",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_requestId",
          "type": "bytes32"
        }
      ],
      "name": "queryRequestStatus",
      "outputs": [
        {
          "internalType": "enum BrevisRequest.RequestStatus",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_requestId",
          "type": "bytes32"
        }
      ],
      "name": "refund",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "requestExts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "canChallengeBefore",
          "type": "uint256"
        },
        {
          "internalType": "enum BrevisRequest.AskForType",
          "name": "askFor",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "shouldRespondBefore",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requestTimeout",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "requests",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "refundee",
          "type": "address"
        },
        {
          "internalType": "contract IBrevisApp",
          "name": "callback",
          "type": "address"
        },
        {
          "internalType": "enum BrevisRequest.RequestStatus",
          "name": "status",
          "type": "uint8"
        },
        {
          "internalType": "enum BrevisRequest.Option",
          "name": "option",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "responseTimeout",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_requestId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_refundee",
          "type": "address"
        },
        {
          "internalType": "contract IBrevisApp",
          "name": "_callback",
          "type": "address"
        },
        {
          "internalType": "enum BrevisRequest.Option",
          "name": "_option",
          "type": "uint8"
        }
      ],
      "name": "sendRequest",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IBrevisEigen",
          "name": "_brevisEigen",
          "type": "address"
        }
      ],
      "name": "setBrevisEigen",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_challengeWindow",
          "type": "uint256"
        }
      ],
      "name": "setChallengeWindow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeCollector",
          "type": "address"
        }
      ],
      "name": "setFeeCollector",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_timeout",
          "type": "uint256"
        }
      ],
      "name": "setRequestTimeout",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_responseTimeout",
          "type": "uint256"
        }
      ],
      "name": "setResponseTimeout",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xe51307107f92e60ed34b0046d351120d30679b302c4e060e335d0944af77e383",
  "receipt": {
    "to": null,
    "from": "0x58b529F9084D7eAA598EB3477Fe36064C5B7bbC1",
    "contractAddress": "0x36d4b89b679D4B5Dd79666002f54cFA3a5b3E571",
    "transactionIndex": 95,
    "gasUsed": "1362533",
    "logsBloom": "0x
    "blockHash": "0x9fc0d0d7872631fbd947b20b4a24137abb94a6f7b838c9c735b7ee82e21d9012",
    "transactionHash": "0xe51307107f92e60ed34b0046d351120d30679b302c4e060e335d0944af77e383",
    "logs": [
      {
        "transactionIndex": 95,
        "blockNumber": 19621833,
        "transactionHash": "0xe51307107f92e60ed34b0046d351120d30679b302c4e060e335d0944af77e383",
        "address": "0x36d4b89b679D4B5Dd79666002f54cFA3a5b3E571",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000058b529f9084d7eaa598eb3477fe36064c5b7bbc1"
        ],
        "data": "0x",
        "logIndex": 241,
        "blockHash": "0x9fc0d0d7872631fbd947b20b4a24137abb94a6f7b838c9c735b7ee82e21d9012"
      }
    ],
    "blockNumber": 19621833,
    "cumulativeGasUsed": "9555558",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x58b529F9084D7eAA598EB3477Fe36064C5B7bbC1",
    "0x9E10764042A2168dE8B8Aab8E7862eF98E759F90",
    "0x9FC952BdCbB7Daca7d420fA55b942405B073A89d"
  ],
  "numDeployments": 1,
  "solcInputHash": "67a90a930df622f7b137271c06edbe3f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeCollector\",\"type\":\"address\"},{\"internalType\":\"contract IBrevisProof\",\"name\":\"_brevisProof\",\"type\":\"address\"},{\"internalType\":\"contract IBrevisEigen\",\"name\":\"_brevisEigen\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"enum BrevisRequest.AskForType\",\"name\":\"askFor\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"AskFor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"to\",\"type\":\"uint256\"}],\"name\":\"ChallengeWindowUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"FeeCollectorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"requestIds\",\"type\":\"bytes32[]\"},{\"indexed\":false,\"internalType\":\"bytes[]\",\"name\":\"queryURLs\",\"type\":\"bytes[]\"}],\"name\":\"OpRequestsFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"name\":\"ProofPost\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"name\":\"QueryDataPost\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"name\":\"RequestFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"name\":\"RequestRefunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"contract IBrevisApp\",\"name\":\"callback\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum BrevisRequest.Option\",\"name\":\"option\",\"type\":\"uint8\"}],\"name\":\"RequestSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"to\",\"type\":\"uint256\"}],\"name\":\"RequestTimeoutUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"to\",\"type\":\"uint256\"}],\"name\":\"ResponseTimeoutUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"askForProof\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"askForQueryData\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"brevisEigen\",\"outputs\":[{\"internalType\":\"contract IBrevisEigen\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"brevisProof\",\"outputs\":[{\"internalType\":\"contract IBrevisProof\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"challengeQueryData\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"challengeWindow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"collectFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_requestIds\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_queryURLs\",\"type\":\"bytes[]\"}],\"name\":\"fulfillOpRequests\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_requestId\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"_chainId\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_proof\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_appCircuitOutput\",\"type\":\"bytes\"}],\"name\":\"fulfillRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeCollector\",\"type\":\"address\"},{\"internalType\":\"contract IBrevisProof\",\"name\":\"_brevisProof\",\"type\":\"address\"},{\"internalType\":\"contract IBrevisEigen\",\"name\":\"_brevisEigen\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"keccakToMimc\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"postProof\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"postQueryData\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_requestId\",\"type\":\"bytes32\"}],\"name\":\"queryRequestStatus\",\"outputs\":[{\"internalType\":\"enum BrevisRequest.RequestStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_requestId\",\"type\":\"bytes32\"}],\"name\":\"refund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"requestExts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"canChallengeBefore\",\"type\":\"uint256\"},{\"internalType\":\"enum BrevisRequest.AskForType\",\"name\":\"askFor\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"shouldRespondBefore\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestTimeout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"requests\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"refundee\",\"type\":\"address\"},{\"internalType\":\"contract IBrevisApp\",\"name\":\"callback\",\"type\":\"address\"},{\"internalType\":\"enum BrevisRequest.RequestStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum BrevisRequest.Option\",\"name\":\"option\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"responseTimeout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_requestId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_refundee\",\"type\":\"address\"},{\"internalType\":\"contract IBrevisApp\",\"name\":\"_callback\",\"type\":\"address\"},{\"internalType\":\"enum BrevisRequest.Option\",\"name\":\"_option\",\"type\":\"uint8\"}],\"name\":\"sendRequest\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBrevisEigen\",\"name\":\"_brevisEigen\",\"type\":\"address\"}],\"name\":\"setBrevisEigen\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_challengeWindow\",\"type\":\"uint256\"}],\"name\":\"setChallengeWindow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeCollector\",\"type\":\"address\"}],\"name\":\"setFeeCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_timeout\",\"type\":\"uint256\"}],\"name\":\"setRequestTimeout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_responseTimeout\",\"type\":\"uint256\"}],\"name\":\"setResponseTimeout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/BrevisRequest.sol\":\"BrevisRequest\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"contracts/core/BrevisRequest.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport \\\"../lib/FeeVault.sol\\\";\\nimport \\\"../interface/IBrevisProof.sol\\\";\\nimport \\\"../interface/IBrevisApp.sol\\\";\\nimport \\\"../interface/IBrevisEigen.sol\\\";\\n\\ncontract BrevisRequest is FeeVault {\\n    uint256 public requestTimeout;\\n    IBrevisProof public brevisProof;\\n    IBrevisEigen public brevisEigen;\\n\\n    enum RequestStatus {\\n        Pending,\\n        ZkAttested,\\n        OpSubmitted,\\n        OpQueryDataSubmitted,\\n        OpDisputing,\\n        OpDisputed,\\n        OpAttested,\\n        Refunded\\n    }\\n\\n    enum Option {\\n        ZkMode,\\n        OpMode_MIMC,\\n        OpMode_KECCAK\\n    }\\n\\n    struct Request {\\n        uint256 deadline;\\n        uint256 fee;\\n        address refundee;\\n        IBrevisApp callback;\\n        RequestStatus status;\\n        Option option;\\n    }\\n    mapping(bytes32 => Request) public requests;\\n\\n    event RequestTimeoutUpdated(uint256 from, uint256 to);\\n    event RequestSent(\\n        bytes32 requestId,\\n        address sender,\\n        uint256 fee,\\n        IBrevisApp callback,\\n        Option option\\n    );\\n    event RequestFulfilled(bytes32 requestId);\\n    event RequestRefunded(bytes32 requestId);\\n\\n    constructor(\\n        address _feeCollector,\\n        IBrevisProof _brevisProof,\\n        IBrevisEigen _brevisEigen\\n    ) FeeVault(_feeCollector) {\\n        brevisProof = _brevisProof;\\n        brevisEigen = _brevisEigen;\\n    }\\n\\n    // this is only to be called by Proxy via delegateCall as initOwner will require _owner is 0\\n    function init(\\n        address _feeCollector,\\n        IBrevisProof _brevisProof,\\n        IBrevisEigen _brevisEigen\\n    ) external {\\n        initOwner();\\n        feeCollector = _feeCollector;\\n        brevisProof = _brevisProof;\\n        brevisEigen = _brevisEigen;\\n    }\\n\\n    function setBrevisEigen(IBrevisEigen _brevisEigen) external onlyOwner {\\n        brevisEigen = _brevisEigen;\\n    }\\n\\n    function sendRequest(\\n        bytes32 _requestId,\\n        address _refundee,\\n        IBrevisApp _callback,\\n        Option _option\\n    ) external payable {\\n        require(requests[_requestId].deadline == 0, \\\"request already in queue\\\");\\n        require(_refundee != address(0), \\\"refundee not provided\\\");\\n        requests[_requestId] = Request(\\n            block.timestamp + requestTimeout,\\n            msg.value,\\n            _refundee,\\n            _callback,\\n            RequestStatus.Pending,\\n            _option\\n        );\\n        emit RequestSent(_requestId, msg.sender, msg.value, _callback, _option);\\n    }\\n\\n    // zk mode\\n    function fulfillRequest(\\n        bytes32 _requestId,\\n        uint64 _chainId,\\n        bytes calldata _proof,\\n        bytes calldata _appCircuitOutput\\n    ) external {\\n        require(\\n            !IBrevisProof(brevisProof).hasProof(_requestId),\\n            \\\"proof already generated\\\"\\n        );\\n\\n        bytes32 reqIdFromProof = IBrevisProof(brevisProof).submitProof(\\n            _chainId,\\n            _proof\\n        ); // will be reverted when proof is not valid\\n        require(_requestId == reqIdFromProof, \\\"requestId and proof not match\\\");\\n        requests[_requestId].status = RequestStatus.ZkAttested;\\n\\n        emit RequestFulfilled(_requestId);\\n\\n        address app = address(requests[_requestId].callback);\\n        if (app != address(0)) {\\n            // No matter if the call is success or not. The relayer should set correct gas limit.\\n            // If the call exceeds the gasleft(), as the proof data is saved ahead,\\n            // anyone can still call the app.callback directly to proceed\\n            app.call(\\n                abi.encodeWithSelector(\\n                    IBrevisApp.brevisCallback.selector,\\n                    _requestId,\\n                    _appCircuitOutput\\n                )\\n            );\\n        }\\n    }\\n\\n    function refund(bytes32 _requestId) public {\\n        require(block.timestamp > requests[_requestId].deadline);\\n        require(\\n            !IBrevisProof(brevisProof).hasProof(_requestId),\\n            \\\"proof already generated\\\"\\n        );\\n        require(requests[_requestId].deadline != 0, \\\"request not in queue\\\");\\n        requests[_requestId].deadline = 0; //reset deadline, then user is able to send request again\\n        (bool sent, ) = requests[_requestId].refundee.call{\\n            value: requests[_requestId].fee,\\n            gas: 50000\\n        }(\\\"\\\");\\n        require(sent, \\\"send native failed\\\");\\n        requests[_requestId].status = RequestStatus.Refunded;\\n        emit RequestRefunded(_requestId);\\n    }\\n\\n    function setRequestTimeout(uint256 _timeout) external onlyOwner {\\n        uint256 oldTimeout = requestTimeout;\\n        requestTimeout = _timeout;\\n        emit RequestTimeoutUpdated(oldTimeout, _timeout);\\n    }\\n\\n    // op/avs mode\\n    enum AskForType {\\n        NULL,\\n        QueryData,\\n        Proof\\n    }\\n\\n    struct RequestExt {\\n        uint256 canChallengeBefore;\\n        AskForType askFor;\\n        uint256 shouldRespondBefore;\\n    }\\n    mapping(bytes32 => RequestExt) public requestExts;\\n    mapping(bytes32 => bytes32) public keccakToMimc;\\n\\n    uint256 public challengeWindow; // in seconds\\n    uint256 public responseTimeout;\\n    event ChallengeWindowUpdated(uint256 from, uint256 to);\\n    event ResponseTimeoutUpdated(uint256 from, uint256 to);\\n\\n    function setChallengeWindow(uint256 _challengeWindow) external onlyOwner {\\n        uint256 oldChallengeWindow = challengeWindow;\\n        challengeWindow = _challengeWindow;\\n        emit ChallengeWindowUpdated(oldChallengeWindow, _challengeWindow);\\n    }\\n\\n    function setResponseTimeout(uint256 _responseTimeout) external onlyOwner {\\n        uint256 oldResponseTimeout = responseTimeout;\\n        responseTimeout = _responseTimeout;\\n        emit ResponseTimeoutUpdated(oldResponseTimeout, _responseTimeout);\\n    }\\n\\n    function queryRequestStatus(\\n        bytes32 _requestId\\n    ) external view returns (RequestStatus) {\\n        if (\\n            (requests[_requestId].status == RequestStatus.OpSubmitted ||\\n                requests[_requestId].status ==\\n                RequestStatus.OpQueryDataSubmitted) &&\\n            requestExts[_requestId].canChallengeBefore <= block.timestamp\\n        ) {\\n            return RequestStatus.OpAttested;\\n        }\\n\\n        if (\\n            requests[_requestId].status == RequestStatus.OpDisputing &&\\n            requestExts[_requestId].shouldRespondBefore <= block.timestamp\\n        ) {\\n            return RequestStatus.OpDisputed;\\n        }\\n\\n        return requests[_requestId].status;\\n    }\\n\\n    event OpRequestsFulfilled(bytes32[] requestIds, bytes[] queryURLs);\\n\\n    // Op functions\\n    function fulfillOpRequests(\\n        bytes32[] calldata _requestIds,\\n        bytes[] calldata _queryURLs\\n    ) external {\\n        require(_requestIds.length > 0, \\\"invalid requestIds\\\");\\n        require(_requestIds.length == _queryURLs.length);\\n\\n        // must already verified in brevisEigen\\n        brevisEigen.mustVerified(_requestIds);\\n\\n        for (uint i = 0; i < _requestIds.length; i++) {\\n            bytes32 reqId = _requestIds[i];\\n            require(\\n                !IBrevisProof(brevisProof).hasProof(reqId),\\n                \\\"proof already generated\\\"\\n            );\\n            brevisProof.submitOpResult(reqId);\\n            requests[reqId].status = RequestStatus.OpSubmitted;\\n            requestExts[reqId].canChallengeBefore =\\n                block.timestamp +\\n                challengeWindow;\\n        }\\n\\n        emit OpRequestsFulfilled(_requestIds, _queryURLs);\\n    }\\n\\n    event AskFor(bytes32 indexed requestId, AskForType askFor, address from);\\n    event QueryDataPost(bytes32 indexed requestId);\\n    event ProofPost(bytes32 indexed requestId);\\n\\n    function askForQueryData(bytes32) external payable {\\n        revert(\\\"not implemented\\\");\\n    }\\n\\n    function postQueryData(bytes32, bytes calldata) external pure {\\n        revert(\\\"not implemented\\\");\\n    }\\n\\n    // after postQueryData with OpMode_MIMC\\n    function challengeQueryData(bytes calldata) external pure {\\n        revert(\\\"not implemented\\\");\\n    }\\n\\n    function askForProof(bytes32) external payable {\\n        revert(\\\"not implemented\\\");\\n    }\\n\\n    function postProof(bytes32, uint64, bytes calldata) external pure {\\n        revert(\\\"not implemented\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x53fd8ce79b72e976dba3af4bd56ad6a4caa4b7171cf87f25d47bafad8d1c9d4e\",\"license\":\"MIT\"},\"contracts/interface/IBrevisApp.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport \\\"../lib/Lib.sol\\\";\\n\\ninterface IBrevisApp {\\n    function brevisCallback(bytes32 _requestId, bytes calldata _appCircuitOutput) external;\\n}\\n\",\"keccak256\":\"0xdf6a88fdb02d17c2772621297923887de2dcee7c03c10bc1a521b57e4c915b3c\",\"license\":\"MIT\"},\"contracts/interface/IBrevisEigen.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\ninterface IBrevisEigen {\\n    function mustVerified(bytes32[] calldata reqIds) external;\\n}\\n\",\"keccak256\":\"0xbd629340282509009310150301835ef2f27bdba4138522d18865c05d37fed884\",\"license\":\"MIT\"},\"contracts/interface/IBrevisProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport \\\"../lib/Lib.sol\\\";\\n\\ninterface IBrevisProof {\\n    function submitProof(\\n        uint64 _chainId,\\n        bytes calldata _proofWithPubInputs\\n    ) external returns (bytes32 _requestId);\\n\\n    function hasProof(bytes32 _requestId) external view returns (bool);\\n\\n    // return appCommitHash and appVkHash\\n    function getProofAppData(\\n        bytes32 _requestId\\n    ) external view returns (bytes32, bytes32);\\n\\n    function submitOpResult(bytes32 _requestId) external;\\n\\n    function validateOpRequest(\\n        bytes32 _requestId,\\n        uint64 _chainId,\\n        Brevis.ExtractInfos calldata _info\\n    ) external view;\\n}\\n\",\"keccak256\":\"0x90160738eb7a905a32ea0fa3f5484e54abe0c5013bf0652d708e7b71673d08d6\",\"license\":\"MIT\"},\"contracts/lib/FeeVault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity ^0.8.18;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./Ownable.sol\\\";\\n\\n/**\\n * @title Allows the owner to set fee collector and allows fee collectors to collect fees\\n */\\ncontract FeeVault is Ownable {\\n    using SafeERC20 for IERC20;\\n\\n    address public feeCollector;\\n\\n    event FeeCollectorUpdated(address from, address to);\\n\\n    constructor(address _feeCollector) {\\n        feeCollector = _feeCollector;\\n    }\\n\\n    modifier onlyFeeCollector() {\\n        require(msg.sender == feeCollector, \\\"not fee collector\\\");\\n        _;\\n    }\\n\\n    function collectFee(\\n        uint256 _amount,\\n        address _to\\n    ) external onlyFeeCollector {\\n        (bool sent, ) = _to.call{value: _amount, gas: 50000}(\\\"\\\");\\n        require(sent, \\\"send native failed\\\");\\n    }\\n\\n    function setFeeCollector(address _feeCollector) external onlyOwner {\\n        address oldFeeCollector = feeCollector;\\n        feeCollector = _feeCollector;\\n        emit FeeCollectorUpdated(oldFeeCollector, _feeCollector);\\n    }\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0xa4b6aceb4b2adaa4c5be5139db2f5cdb61a9ef99f7732f342bc60b86402906b2\",\"license\":\"GPL-3.0-only\"},\"contracts/lib/Lib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport \\\"solidity-rlp/contracts/RLPReader.sol\\\";\\n\\nlibrary Brevis {\\n    struct ReceiptInfo {\\n        uint64 blkNum;\\n        uint64 receiptIndex; // ReceiptIndex in the block\\n        LogInfo[] logs;\\n    }\\n\\n    struct LogInfo {\\n        uint64 logIndex; // LogIndex of the field\\n        bytes32 value;\\n        bool valueFromTopic;\\n        uint64 valueIndex; // index of the fields in topic or data\\n        address contractAddress;\\n        bytes32 logTopic0;\\n    }\\n\\n    struct StorageInfo {\\n        bytes32 blockHash;\\n        address account;\\n        bytes32 slot;\\n        bytes32 slotValue;\\n        uint64 blockNumber;\\n    }\\n\\n    struct TransactionInfo {\\n        bytes32 txHash;\\n        bytes32 hashOfRawTxData;\\n        bytes32 blockHash;\\n        uint64 blockNumber;\\n    }\\n\\n    struct ExtractInfos {\\n        ReceiptInfo[] receipts;\\n        StorageInfo[] stores;\\n        TransactionInfo[] txs;\\n    }\\n\\n    // retrieved from proofData, to align the logs with circuit...\\n    struct ProofData {\\n        bytes32 commitHash;\\n        bytes32 appCommitHash; // zk-program computing circuit commit hash\\n        bytes32 appVkHash; // zk-program computing circuit Verify Key hash\\n        bytes32 smtRoot; // for zk-program computing proof only\\n    }\\n}\\n\\nlibrary Tx {\\n    using RLPReader for bytes;\\n    using RLPReader for uint;\\n    using RLPReader for RLPReader.RLPItem;\\n\\n    struct TxInfo {\\n        uint64 chainId;\\n        uint64 nonce;\\n        uint256 gasTipCap;\\n        uint256 gasFeeCap;\\n        uint256 gas;\\n        address to;\\n        uint256 value;\\n        bytes data;\\n        address from; // calculate from V R S\\n    }\\n\\n    // support DynamicFeeTxType for now\\n    function decodeTx(\\n        bytes calldata txRaw\\n    ) public pure returns (TxInfo memory info) {\\n        uint8 txType = uint8(txRaw[0]);\\n        require(txType == 2, \\\"not a DynamicFeeTxType\\\");\\n\\n        bytes memory rlpData = txRaw[1:];\\n        RLPReader.RLPItem[] memory values = rlpData.toRlpItem().toList();\\n        info.chainId = uint64(values[0].toUint());\\n        info.nonce = uint64(values[1].toUint());\\n        info.gasTipCap = values[2].toUint();\\n        info.gasFeeCap = values[3].toUint();\\n        info.gas = values[4].toUint();\\n        info.to = values[5].toAddress();\\n        info.value = values[6].toUint();\\n        info.data = values[7].toBytes();\\n\\n        (uint8 v, bytes32 r, bytes32 s) = (\\n            uint8(values[9].toUint()),\\n            bytes32(values[10].toBytes()),\\n            bytes32(values[11].toBytes())\\n        );\\n        // remove r,s,v and adjust length field\\n        bytes memory unsignedTxRaw;\\n        uint16 unsignedTxRawDataLength;\\n        uint8 prefix = uint8(txRaw[1]);\\n        uint8 lenBytes = prefix - 0xf7; // assume lenBytes won't larger than 2, means the tx rlp data size won't exceed 2^16\\n        if (lenBytes == 1) {\\n            unsignedTxRawDataLength = uint8(bytes1(txRaw[2:3])) - 67; //67 is the bytes of r,s,v\\n        } else {\\n            unsignedTxRawDataLength =\\n                uint16(bytes2(txRaw[2:2 + lenBytes])) -\\n                67;\\n        }\\n        if (unsignedTxRawDataLength <= 55) {\\n            unsignedTxRaw = abi.encodePacked(\\n                txRaw[:2],\\n                txRaw[3:txRaw.length - 67]\\n            );\\n            unsignedTxRaw[1] = bytes1(0xc0 + uint8(unsignedTxRawDataLength));\\n        } else {\\n            if (unsignedTxRawDataLength <= 255) {\\n                unsignedTxRaw = abi.encodePacked(\\n                    txRaw[0],\\n                    bytes1(0xf8),\\n                    bytes1(uint8(unsignedTxRawDataLength)),\\n                    txRaw[2 + lenBytes:txRaw.length - 67]\\n                );\\n            } else {\\n                unsignedTxRaw = abi.encodePacked(\\n                    txRaw[0],\\n                    bytes1(0xf9),\\n                    bytes2(unsignedTxRawDataLength),\\n                    txRaw[2 + lenBytes:txRaw.length - 67]\\n                );\\n            }\\n        }\\n        info.from = recover(keccak256(unsignedTxRaw), r, s, v);\\n    }\\n\\n    function recover(\\n        bytes32 message,\\n        bytes32 r,\\n        bytes32 s,\\n        uint8 v\\n    ) internal pure returns (address) {\\n        if (v < 27) {\\n            v += 27;\\n        }\\n        return ecrecover(message, v, r, s);\\n    }\\n}\\n\",\"keccak256\":\"0x92428bc2e03bd16bec58d4cf8f745c5bd4c2b79c4bb405dfa4cd375668a9ea29\",\"license\":\"MIT\"},\"contracts/lib/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity ^0.8.18;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n *\\n * This adds a normal func that setOwner if _owner is address(0). So we can't allow\\n * renounceOwnership. So we can support Proxy based upgradable contract\\n */\\nabstract contract Ownable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Only to be called by inherit contracts, in their init func called by Proxy\\n     * we require _owner == address(0), which is only possible when it's a delegateCall\\n     * because constructor sets _owner in contract state.\\n     */\\n    function initOwner() internal {\\n        require(_owner == address(0), \\\"owner already set\\\");\\n        _setOwner(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == msg.sender, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(\\n            newOwner != address(0),\\n            \\\"Ownable: new owner is the zero address\\\"\\n        );\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xee33be64b8b7b84231248c3f18d763e1aa87a5926340f4ec9d6542e6f5e4b0a5\",\"license\":\"GPL-3.0-only\"},\"solidity-rlp/contracts/RLPReader.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * @author Hamdi Allam hamdi.allam97@gmail.com\\n * Please reach out with any questions or concerns\\n */\\npragma solidity >=0.5.10 <0.9.0;\\n\\nlibrary RLPReader {\\n    uint8 constant STRING_SHORT_START = 0x80;\\n    uint8 constant STRING_LONG_START = 0xb8;\\n    uint8 constant LIST_SHORT_START = 0xc0;\\n    uint8 constant LIST_LONG_START = 0xf8;\\n    uint8 constant WORD_SIZE = 32;\\n\\n    struct RLPItem {\\n        uint256 len;\\n        uint256 memPtr;\\n    }\\n\\n    struct Iterator {\\n        RLPItem item; // Item that's being iterated over.\\n        uint256 nextPtr; // Position of the next item in the list.\\n    }\\n\\n    /*\\n     * @dev Returns the next element in the iteration. Reverts if it has not next element.\\n     * @param self The iterator.\\n     * @return The next element in the iteration.\\n     */\\n    function next(Iterator memory self) internal pure returns (RLPItem memory) {\\n        require(hasNext(self));\\n\\n        uint256 ptr = self.nextPtr;\\n        uint256 itemLength = _itemLength(ptr);\\n        self.nextPtr = ptr + itemLength;\\n\\n        return RLPItem(itemLength, ptr);\\n    }\\n\\n    /*\\n     * @dev Returns true if the iteration has more elements.\\n     * @param self The iterator.\\n     * @return true if the iteration has more elements.\\n     */\\n    function hasNext(Iterator memory self) internal pure returns (bool) {\\n        RLPItem memory item = self.item;\\n        return self.nextPtr < item.memPtr + item.len;\\n    }\\n\\n    /*\\n     * @param item RLP encoded bytes\\n     */\\n    function toRlpItem(bytes memory item) internal pure returns (RLPItem memory) {\\n        uint256 memPtr;\\n        assembly {\\n            memPtr := add(item, 0x20)\\n        }\\n\\n        return RLPItem(item.length, memPtr);\\n    }\\n\\n    /*\\n     * @dev Create an iterator. Reverts if item is not a list.\\n     * @param self The RLP item.\\n     * @return An 'Iterator' over the item.\\n     */\\n    function iterator(RLPItem memory self) internal pure returns (Iterator memory) {\\n        require(isList(self));\\n\\n        uint256 ptr = self.memPtr + _payloadOffset(self.memPtr);\\n        return Iterator(self, ptr);\\n    }\\n\\n    /*\\n     * @param the RLP item.\\n     */\\n    function rlpLen(RLPItem memory item) internal pure returns (uint256) {\\n        return item.len;\\n    }\\n\\n    /*\\n     * @param the RLP item.\\n     * @return (memPtr, len) pair: location of the item's payload in memory.\\n     */\\n    function payloadLocation(RLPItem memory item) internal pure returns (uint256, uint256) {\\n        uint256 offset = _payloadOffset(item.memPtr);\\n        uint256 memPtr = item.memPtr + offset;\\n        uint256 len = item.len - offset; // data length\\n        return (memPtr, len);\\n    }\\n\\n    /*\\n     * @param the RLP item.\\n     */\\n    function payloadLen(RLPItem memory item) internal pure returns (uint256) {\\n        (, uint256 len) = payloadLocation(item);\\n        return len;\\n    }\\n\\n    /*\\n     * @param the RLP item containing the encoded list.\\n     */\\n    function toList(RLPItem memory item) internal pure returns (RLPItem[] memory) {\\n        require(isList(item));\\n\\n        uint256 items = numItems(item);\\n        RLPItem[] memory result = new RLPItem[](items);\\n\\n        uint256 memPtr = item.memPtr + _payloadOffset(item.memPtr);\\n        uint256 dataLen;\\n        for (uint256 i = 0; i < items; i++) {\\n            dataLen = _itemLength(memPtr);\\n            result[i] = RLPItem(dataLen, memPtr);\\n            memPtr = memPtr + dataLen;\\n        }\\n\\n        return result;\\n    }\\n\\n    // @return indicator whether encoded payload is a list. negate this function call for isData.\\n    function isList(RLPItem memory item) internal pure returns (bool) {\\n        if (item.len == 0) return false;\\n\\n        uint8 byte0;\\n        uint256 memPtr = item.memPtr;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < LIST_SHORT_START) return false;\\n        return true;\\n    }\\n\\n    /*\\n     * @dev A cheaper version of keccak256(toRlpBytes(item)) that avoids copying memory.\\n     * @return keccak256 hash of RLP encoded bytes.\\n     */\\n    function rlpBytesKeccak256(RLPItem memory item) internal pure returns (bytes32) {\\n        uint256 ptr = item.memPtr;\\n        uint256 len = item.len;\\n        bytes32 result;\\n        assembly {\\n            result := keccak256(ptr, len)\\n        }\\n        return result;\\n    }\\n\\n    /*\\n     * @dev A cheaper version of keccak256(toBytes(item)) that avoids copying memory.\\n     * @return keccak256 hash of the item payload.\\n     */\\n    function payloadKeccak256(RLPItem memory item) internal pure returns (bytes32) {\\n        (uint256 memPtr, uint256 len) = payloadLocation(item);\\n        bytes32 result;\\n        assembly {\\n            result := keccak256(memPtr, len)\\n        }\\n        return result;\\n    }\\n\\n    /** RLPItem conversions into data types **/\\n\\n    // @returns raw rlp encoding in bytes\\n    function toRlpBytes(RLPItem memory item) internal pure returns (bytes memory) {\\n        bytes memory result = new bytes(item.len);\\n        if (result.length == 0) return result;\\n\\n        uint256 ptr;\\n        assembly {\\n            ptr := add(0x20, result)\\n        }\\n\\n        copy(item.memPtr, ptr, item.len);\\n        return result;\\n    }\\n\\n    // any non-zero byte except \\\"0x80\\\" is considered true\\n    function toBoolean(RLPItem memory item) internal pure returns (bool) {\\n        require(item.len == 1);\\n        uint256 result;\\n        uint256 memPtr = item.memPtr;\\n        assembly {\\n            result := byte(0, mload(memPtr))\\n        }\\n\\n        // SEE Github Issue #5.\\n        // Summary: Most commonly used RLP libraries (i.e Geth) will encode\\n        // \\\"0\\\" as \\\"0x80\\\" instead of as \\\"0\\\". We handle this edge case explicitly\\n        // here.\\n        if (result == 0 || result == STRING_SHORT_START) {\\n            return false;\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    function toAddress(RLPItem memory item) internal pure returns (address) {\\n        // 1 byte for the length prefix\\n        require(item.len == 21);\\n\\n        return address(uint160(toUint(item)));\\n    }\\n\\n    function toUint(RLPItem memory item) internal pure returns (uint256) {\\n        require(item.len > 0 && item.len <= 33);\\n\\n        (uint256 memPtr, uint256 len) = payloadLocation(item);\\n\\n        uint256 result;\\n        assembly {\\n            result := mload(memPtr)\\n\\n            // shift to the correct location if neccesary\\n            if lt(len, 32) {\\n                result := div(result, exp(256, sub(32, len)))\\n            }\\n        }\\n\\n        return result;\\n    }\\n\\n    // enforces 32 byte length\\n    function toUintStrict(RLPItem memory item) internal pure returns (uint256) {\\n        // one byte prefix\\n        require(item.len == 33);\\n\\n        uint256 result;\\n        uint256 memPtr = item.memPtr + 1;\\n        assembly {\\n            result := mload(memPtr)\\n        }\\n\\n        return result;\\n    }\\n\\n    function toBytes(RLPItem memory item) internal pure returns (bytes memory) {\\n        require(item.len > 0);\\n\\n        (uint256 memPtr, uint256 len) = payloadLocation(item);\\n        bytes memory result = new bytes(len);\\n\\n        uint256 destPtr;\\n        assembly {\\n            destPtr := add(0x20, result)\\n        }\\n\\n        copy(memPtr, destPtr, len);\\n        return result;\\n    }\\n\\n    /*\\n     * Private Helpers\\n     */\\n\\n    // @return number of payload items inside an encoded list.\\n    function numItems(RLPItem memory item) private pure returns (uint256) {\\n        if (item.len == 0) return 0;\\n\\n        uint256 count = 0;\\n        uint256 currPtr = item.memPtr + _payloadOffset(item.memPtr);\\n        uint256 endPtr = item.memPtr + item.len;\\n        while (currPtr < endPtr) {\\n            currPtr = currPtr + _itemLength(currPtr); // skip over an item\\n            count++;\\n        }\\n\\n        return count;\\n    }\\n\\n    // @return entire rlp item byte length\\n    function _itemLength(uint256 memPtr) private pure returns (uint256) {\\n        uint256 itemLen;\\n        uint256 byte0;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < STRING_SHORT_START) {\\n            itemLen = 1;\\n        } else if (byte0 < STRING_LONG_START) {\\n            itemLen = byte0 - STRING_SHORT_START + 1;\\n        } else if (byte0 < LIST_SHORT_START) {\\n            assembly {\\n                let byteLen := sub(byte0, 0xb7) // # of bytes the actual length is\\n                memPtr := add(memPtr, 1) // skip over the first byte\\n\\n                /* 32 byte word size */\\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to get the len\\n                itemLen := add(dataLen, add(byteLen, 1))\\n            }\\n        } else if (byte0 < LIST_LONG_START) {\\n            itemLen = byte0 - LIST_SHORT_START + 1;\\n        } else {\\n            assembly {\\n                let byteLen := sub(byte0, 0xf7)\\n                memPtr := add(memPtr, 1)\\n\\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to the correct length\\n                itemLen := add(dataLen, add(byteLen, 1))\\n            }\\n        }\\n\\n        return itemLen;\\n    }\\n\\n    // @return number of bytes until the data\\n    function _payloadOffset(uint256 memPtr) private pure returns (uint256) {\\n        uint256 byte0;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < STRING_SHORT_START) {\\n            return 0;\\n        } else if (byte0 < STRING_LONG_START || (byte0 >= LIST_SHORT_START && byte0 < LIST_LONG_START)) {\\n            return 1;\\n        } else if (byte0 < LIST_SHORT_START) {\\n            // being explicit\\n            return byte0 - (STRING_LONG_START - 1) + 1;\\n        } else {\\n            return byte0 - (LIST_LONG_START - 1) + 1;\\n        }\\n    }\\n\\n    /*\\n     * @param src Pointer to source\\n     * @param dest Pointer to destination\\n     * @param len Amount of memory to copy from the source\\n     */\\n    function copy(uint256 src, uint256 dest, uint256 len) private pure {\\n        if (len == 0) return;\\n\\n        // copy as many word sizes as possible\\n        for (; len >= WORD_SIZE; len -= WORD_SIZE) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n\\n            src += WORD_SIZE;\\n            dest += WORD_SIZE;\\n        }\\n\\n        if (len > 0) {\\n            // left over bytes. Mask is used to remove unwanted bytes from the word\\n            uint256 mask = 256**(WORD_SIZE - len) - 1;\\n            assembly {\\n                let srcpart := and(mload(src), not(mask)) // zero out src\\n                let destpart := and(mload(dest), mask) // retrieve the bytes\\n                mstore(dest, or(destpart, srcpart))\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3a44f2de3c752fa4f926f3fd4cad8338dab742484150c0d7d2f785409ed8db4d\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x6080346100db57601f6116f638819003918201601f19168301916001600160401b038311848410176100e0578084926060946040528339810103126100db5780516001600160a01b039190828116908190036100db576020820151918383168093036100db5760400151918383168093036100db576000549160018060a01b0319923384821617600055604051953391167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a382600154161760015581600354161760035560045416176004556115ff90816100f78239f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe60806040818152600480361015610021575b505050361561001f57600080fd5b005b600092833560e01c908162a731ed146111155750806301c1aa0d146110b45780630de4c3d71461108d578063184b955914610fd55780632763ce8a14610fa45780632d85fa2014610f5f57806332e7ed8114610c4a5780633f20b4c914610c2b57806361b9fd7314610bf0578063622b6af414610b8f57806369c228a114610b5857806369dc190314610af75780636db03b1d146107705780637249fbb6146109845780637ff7b0d2146108f7578063861a1412146108d85780638da5cb5b146108b257806395d396561461088b5780639d8669851461080d578063a17ed96c146107ee578063a42dce8014610775578063a4514ff314610770578063b6979c3e1461073f578063c415b95c14610717578063c7f5aaa0146106ef578063da03667a14610480578063f2a9c6661461020e5763f2fde38b03610011573461020a57602036600319011261020a5761017661117f565b916001600160a01b0361018d818654163314611245565b8316156101a1578361019e84611581565b80f35b906020608492519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b8280fd5b509190608036600319011261047c5782359061022861119a565b90604435906001600160a01b03928383168093036104785760643593600385101561047457858752602091600583528388205461043157811680156103ee5761027360025442611290565b9084519160c0830183811067ffffffffffffffff8211176103d957899389938c96936003938a5282528782013481528983019182528960608401988c8a526080850198818a5260a08601986102c78161115f565b8952815260058b52209251835551600183015583600283019151166001600160a01b031982541617905501935116835492519160088310156103c6579174ff00000000000000000000000000000000000000007f8351e4cc62a96a972da26714bfbb019926334976bb613c36e0dc72b69cf8f5649a989694927fffffffffffffffffffff0000000000000000000000000000000000000000000075ff00000000000000000000000000000000000000000060a09c9a9896516103888161115f565b6103918161115f565b60a81b16941617918a1b161717905581519485523390850152349084015260608301526103bd8161115f565b6080820152a180f35b634e487b7160e01b8b5260218c5260248bfd5b60418c634e487b7160e01b6000525260246000fd5b835162461bcd60e51b8152808a01849052601560248201527f726566756e646565206e6f742070726f766964656400000000000000000000006044820152606490fd5b835162461bcd60e51b8152808a01849052601860248201527f7265717565737420616c726561647920696e20717565756500000000000000006044820152606490fd5b8680fd5b8580fd5b5080fd5b5082903461047c57608036600319011261047c57803561049e61120f565b9067ffffffffffffffff604435818111610478576104bf90369086016111b0565b9190946064358281116106a3576104d990369083016111b0565b9390956001600160a01b03938460035416918b51996371e8f36b60e11b8b5288868c015260209a8b81602481885afa9081156106e557926105558f95938f938f98969061052e9186916106b8575b5015611317565b86519889978896879563e044095360e01b8752168c86015260248501526044840191611363565b03925af19081156106ae57889161067d575b50840361063a5750958596838752600586526003828820017401000000000000000000000000000000000000000060ff60a01b198254161790557f85e1543bf2f84fe80c6badbce3648c8539ad1df4d2b3d822938ca0538be727e6868351868152a183875260058652600382882001541693846105e2578680f35b86956106136106219288958551958694850198633ceb5b5160e11b8a52602486015260448501526064840191611363565b03601f1981018352826112dd565b51925af15061062e611384565b50808280808080808680f35b875162461bcd60e51b8152908101869052601d60248201527f72657175657374496420616e642070726f6f66206e6f74206d617463680000006044820152606490fd5b90508681813d83116106a7575b61069481836112dd565b810103126106a3575189610567565b8780fd5b503d61068a565b89513d8a823e3d90fd5b6106d891508a3d8c116106de575b6106d081836112dd565b8101906112ff565b38610527565b503d6106c6565b8e513d8f823e3d90fd5b50503461047c578160031936011261047c576020906001600160a01b03600354169051908152f35b50503461047c578160031936011261047c576020906001600160a01b03600154169051908152f35b50913461076d57602036600319011261076d575061076b61076260209335611410565b91518092611238565bf35b80fd5b611226565b50503461047c57602036600319011261047c577f5d16ad41baeb009cd23eb8f6c7cde5c2e0cd5acf4a33926ab488875c37c37f38906107b261117f565b6001600160a01b036107c8818654163314611245565b80600154921690816001600160a01b03198416176001558351921682526020820152a180f35b50503461047c578160031936011261047c576020906009549051908152f35b503461020a57602036600319011261020a5760c092829135815260056020522061087b8154926001830154926001600160a01b03906003826002830154169101549260ff8460a81c1695815197885260208801528601528116606085015260ff608085019160a01c16611238565b6108848161115f565b60a0820152f35b503461020a57602036600319011261020a5760209282913581526007845220549051908152f35b50503461047c578160031936011261047c576001600160a01b0360209254169051908152f35b50503461047c578160031936011261047c576020906008549051908152f35b503461020a578160031936011261020a5761091061119a565b916001600160a01b03600154163303610941575082808061019e948194359061c350f161093b611384565b506113c4565b906020606492519162461bcd60e51b8352820152601160248201527f6e6f742066656520636f6c6c6563746f720000000000000000000000000000006044820152fd5b5082903461047c576020908160031936011261020a578035908184526005835284842054421115610af3576001600160a01b039060248483600354168851928380926371e8f36b60e11b825288878301525afa908115610ae957906109f0918791610acc575015611317565b828552600584528585205415610a89575093610a52848080808099877ffea410cb461deba9fe807dde02d6641d82e1bf09ecc88ecfa0f2ffadf2a1fdfe9a52600589526001878320918383556002830154169101549061c350f161093b611384565b818552600583526003818620017407000000000000000000000000000000000000000060ff60a01b1982541617905551908152a180f35b855162461bcd60e51b8152908101849052601460248201527f72657175657374206e6f7420696e2071756575650000000000000000000000006044820152606490fd5b610ae39150863d88116106de576106d081836112dd565b88610527565b87513d88823e3d90fd5b8380fd5b50903461020a57602036600319011261020a577f86fe7fc31f35681a1ed77325f0cf24935a5d25b1861e7ce9ceed9cb67f2222709135610b426001600160a01b038554163314611245565b600954908060095582519182526020820152a180f35b50903461020a5736600319011261047c5760243567ffffffffffffffff811161020a57610b8892503691016111b0565b505061153c565b50903461020a57602036600319011261020a577f87a73c061f18ffd513249d1d727921e40e348948b01e2979efb36ef4f5204a639135610bda6001600160a01b038554163314611245565b600254908060025582519182526020820152a180f35b83823461047c57606036600319011261047c57610c0b61120f565b5060443567ffffffffffffffff811161020a57610b8892503691016111b0565b50503461047c578160031936011261047c576020906002549051908152f35b503461020a578160031936011261020a5767ffffffffffffffff8135818111610f5b57610c7a90369084016111de565b909260249384358481116106a357610c9590369084016111de565b9390958115610f1957848203610f15576001600160a01b038085541694853b15610f1157895163d1e3471560e01b81528b816020988985830152818381610ce08c8c8c8401916114ff565b03925af18015610f0757610ef4575b508a9897989695965b848110610dc3575050505090610d16918751978089528801916114ff565b918583038187015281835280830192818360051b820101958589925b858410610d63578a7fa1c3ef280bbac31181188d4beffe370ebae03e08d58a3aa4832b107d540c0a838b8b038ca180f35b9091929394959697601f198282030188528835601e1984360301811215610dbf578301868101919035858111610dbb578036038313610dbb57610dab88928392600195611363565b9a01980196959401929190610d32565b8c80fd5b8b80fd5b8b60059a999a9897988c83821b890135926003928784541692516371e8f36b60e11b815285888201528c818b81875afa8015610ee657610e0d918e8592610ec9575b505015611317565b823b1561047c578f9282868b8a838851958694859363e26d07d360e01b85528401525af18015610ebf57610ea6575b508482528b5220017402000000000000000000000000000000000000000060ff60a01b19825416179055610e7260085442611290565b908d52600688528b8d20556000198114610e9457600101989798969596610cf8565b634e487b7160e01b8c5260118252838cfd5b82919350610eb3906112b3565b61076d578e9138610e3c565b84513d85823e3d90fd5b610edf9250803d106106de576106d081836112dd565b388e610e05565b5050508e51903d90823e3d90fd5b610f00909b919b6112b3565b9938610cef565b8b513d8e823e3d90fd5b8a80fd5b8880fd5b83601260649260208b519362461bcd60e51b85528401528201527f696e76616c6964207265717565737449647300000000000000000000000000006044820152fd5b8480fd5b83823461047c57602036600319011261047c57610f7a61117f565b6001600160a01b0390610f91828554163314611245565b166001600160a01b031982541617905580f35b83823461047c57602036600319011261047c57803567ffffffffffffffff811161020a57610b8892503691016111b0565b50903461020a57606036600319011261020a57610ff061117f565b6024356001600160a01b038082168092036104785760443593818516809503610474578187541661104b575061102533611581565b6001600160a01b0319921682600154161760015581600354161760035582541617905580f35b5162461bcd60e51b8152602081870152601160248201527f6f776e657220616c7265616479207365740000000000000000000000000000006044820152606490fd5b50913461076d578060031936011261076d57506001600160a01b0360209254169051908152f35b50903461020a57602036600319011261020a577fedb9338f4b0faf2b899d2d7f54b90753d2a8ebb34936e381edb91b091c3e45a791356110ff6001600160a01b038554163314611245565b600854908060085582519182526020820152a180f35b9291905034610af3576020366003190112610af357606093829135815260066020522090815491600260ff6001830154169101549284526111558161115f565b6020840152820152f35b6003111561116957565b634e487b7160e01b600052602160045260246000fd5b600435906001600160a01b038216820361119557565b600080fd5b602435906001600160a01b038216820361119557565b9181601f840112156111955782359167ffffffffffffffff8311611195576020838186019501011161119557565b9181601f840112156111955782359167ffffffffffffffff8311611195576020808501948460051b01011161119557565b6024359067ffffffffffffffff8216820361119557565b60203660031901121561153c57600080fd5b9060088210156111695752565b1561124c57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b9190820180921161129d57565b634e487b7160e01b600052601160045260246000fd5b67ffffffffffffffff81116112c757604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff8211176112c757604052565b90816020910312611195575180151581036111955790565b1561131e57565b60405162461bcd60e51b815260206004820152601760248201527f70726f6f6620616c72656164792067656e6572617465640000000000000000006044820152606490fd5b908060209392818452848401376000828201840152601f01601f1916010190565b3d156113bf573d9067ffffffffffffffff82116112c757604051916113b3601f8201601f1916602001846112dd565b82523d6000602084013e565b606090565b156113cb57565b60405162461bcd60e51b815260206004820152601260248201527f73656e64206e6174697665206661696c656400000000000000000000000000006044820152606490fd5b60008181526020906005825260409060ff6003838320015460a01c1660088110156114a85760021480156114d9575b806114c5575b6114bc578381526005835260ff6003838320015460a01c1660088110156114a85760041480611491575b61148857600560039360ff9583525220015460a01c1690565b50505050600590565b50838152600683526002828220015442101561146f565b634e487b7160e01b82526021600452602482fd5b50505050600690565b508381526006835281812054421015611445565b508381526005835260ff6003838320015460a01c1660088110156114a85760031461143f565b90918281527f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83116111955760209260051b809284830137010190565b60405162461bcd60e51b815260206004820152600f60248201527f6e6f7420696d706c656d656e74656400000000000000000000000000000000006044820152606490fd5b600054906001600160a01b0380911691826001600160a01b0319821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a356fea264697066735822122093c7463fa7d52e6fd655a2cbf42d306d127060c8f4abcab2abe5ea64effcada964736f6c63430008140033",
  "deployedBytecode": "0x60806040818152600480361015610021575b505050361561001f57600080fd5b005b600092833560e01c908162a731ed146111155750806301c1aa0d146110b45780630de4c3d71461108d578063184b955914610fd55780632763ce8a14610fa45780632d85fa2014610f5f57806332e7ed8114610c4a5780633f20b4c914610c2b57806361b9fd7314610bf0578063622b6af414610b8f57806369c228a114610b5857806369dc190314610af75780636db03b1d146107705780637249fbb6146109845780637ff7b0d2146108f7578063861a1412146108d85780638da5cb5b146108b257806395d396561461088b5780639d8669851461080d578063a17ed96c146107ee578063a42dce8014610775578063a4514ff314610770578063b6979c3e1461073f578063c415b95c14610717578063c7f5aaa0146106ef578063da03667a14610480578063f2a9c6661461020e5763f2fde38b03610011573461020a57602036600319011261020a5761017661117f565b916001600160a01b0361018d818654163314611245565b8316156101a1578361019e84611581565b80f35b906020608492519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b8280fd5b509190608036600319011261047c5782359061022861119a565b90604435906001600160a01b03928383168093036104785760643593600385101561047457858752602091600583528388205461043157811680156103ee5761027360025442611290565b9084519160c0830183811067ffffffffffffffff8211176103d957899389938c96936003938a5282528782013481528983019182528960608401988c8a526080850198818a5260a08601986102c78161115f565b8952815260058b52209251835551600183015583600283019151166001600160a01b031982541617905501935116835492519160088310156103c6579174ff00000000000000000000000000000000000000007f8351e4cc62a96a972da26714bfbb019926334976bb613c36e0dc72b69cf8f5649a989694927fffffffffffffffffffff0000000000000000000000000000000000000000000075ff00000000000000000000000000000000000000000060a09c9a9896516103888161115f565b6103918161115f565b60a81b16941617918a1b161717905581519485523390850152349084015260608301526103bd8161115f565b6080820152a180f35b634e487b7160e01b8b5260218c5260248bfd5b60418c634e487b7160e01b6000525260246000fd5b835162461bcd60e51b8152808a01849052601560248201527f726566756e646565206e6f742070726f766964656400000000000000000000006044820152606490fd5b835162461bcd60e51b8152808a01849052601860248201527f7265717565737420616c726561647920696e20717565756500000000000000006044820152606490fd5b8680fd5b8580fd5b5080fd5b5082903461047c57608036600319011261047c57803561049e61120f565b9067ffffffffffffffff604435818111610478576104bf90369086016111b0565b9190946064358281116106a3576104d990369083016111b0565b9390956001600160a01b03938460035416918b51996371e8f36b60e11b8b5288868c015260209a8b81602481885afa9081156106e557926105558f95938f938f98969061052e9186916106b8575b5015611317565b86519889978896879563e044095360e01b8752168c86015260248501526044840191611363565b03925af19081156106ae57889161067d575b50840361063a5750958596838752600586526003828820017401000000000000000000000000000000000000000060ff60a01b198254161790557f85e1543bf2f84fe80c6badbce3648c8539ad1df4d2b3d822938ca0538be727e6868351868152a183875260058652600382882001541693846105e2578680f35b86956106136106219288958551958694850198633ceb5b5160e11b8a52602486015260448501526064840191611363565b03601f1981018352826112dd565b51925af15061062e611384565b50808280808080808680f35b875162461bcd60e51b8152908101869052601d60248201527f72657175657374496420616e642070726f6f66206e6f74206d617463680000006044820152606490fd5b90508681813d83116106a7575b61069481836112dd565b810103126106a3575189610567565b8780fd5b503d61068a565b89513d8a823e3d90fd5b6106d891508a3d8c116106de575b6106d081836112dd565b8101906112ff565b38610527565b503d6106c6565b8e513d8f823e3d90fd5b50503461047c578160031936011261047c576020906001600160a01b03600354169051908152f35b50503461047c578160031936011261047c576020906001600160a01b03600154169051908152f35b50913461076d57602036600319011261076d575061076b61076260209335611410565b91518092611238565bf35b80fd5b611226565b50503461047c57602036600319011261047c577f5d16ad41baeb009cd23eb8f6c7cde5c2e0cd5acf4a33926ab488875c37c37f38906107b261117f565b6001600160a01b036107c8818654163314611245565b80600154921690816001600160a01b03198416176001558351921682526020820152a180f35b50503461047c578160031936011261047c576020906009549051908152f35b503461020a57602036600319011261020a5760c092829135815260056020522061087b8154926001830154926001600160a01b03906003826002830154169101549260ff8460a81c1695815197885260208801528601528116606085015260ff608085019160a01c16611238565b6108848161115f565b60a0820152f35b503461020a57602036600319011261020a5760209282913581526007845220549051908152f35b50503461047c578160031936011261047c576001600160a01b0360209254169051908152f35b50503461047c578160031936011261047c576020906008549051908152f35b503461020a578160031936011261020a5761091061119a565b916001600160a01b03600154163303610941575082808061019e948194359061c350f161093b611384565b506113c4565b906020606492519162461bcd60e51b8352820152601160248201527f6e6f742066656520636f6c6c6563746f720000000000000000000000000000006044820152fd5b5082903461047c576020908160031936011261020a578035908184526005835284842054421115610af3576001600160a01b039060248483600354168851928380926371e8f36b60e11b825288878301525afa908115610ae957906109f0918791610acc575015611317565b828552600584528585205415610a89575093610a52848080808099877ffea410cb461deba9fe807dde02d6641d82e1bf09ecc88ecfa0f2ffadf2a1fdfe9a52600589526001878320918383556002830154169101549061c350f161093b611384565b818552600583526003818620017407000000000000000000000000000000000000000060ff60a01b1982541617905551908152a180f35b855162461bcd60e51b8152908101849052601460248201527f72657175657374206e6f7420696e2071756575650000000000000000000000006044820152606490fd5b610ae39150863d88116106de576106d081836112dd565b88610527565b87513d88823e3d90fd5b8380fd5b50903461020a57602036600319011261020a577f86fe7fc31f35681a1ed77325f0cf24935a5d25b1861e7ce9ceed9cb67f2222709135610b426001600160a01b038554163314611245565b600954908060095582519182526020820152a180f35b50903461020a5736600319011261047c5760243567ffffffffffffffff811161020a57610b8892503691016111b0565b505061153c565b50903461020a57602036600319011261020a577f87a73c061f18ffd513249d1d727921e40e348948b01e2979efb36ef4f5204a639135610bda6001600160a01b038554163314611245565b600254908060025582519182526020820152a180f35b83823461047c57606036600319011261047c57610c0b61120f565b5060443567ffffffffffffffff811161020a57610b8892503691016111b0565b50503461047c578160031936011261047c576020906002549051908152f35b503461020a578160031936011261020a5767ffffffffffffffff8135818111610f5b57610c7a90369084016111de565b909260249384358481116106a357610c9590369084016111de565b9390958115610f1957848203610f15576001600160a01b038085541694853b15610f1157895163d1e3471560e01b81528b816020988985830152818381610ce08c8c8c8401916114ff565b03925af18015610f0757610ef4575b508a9897989695965b848110610dc3575050505090610d16918751978089528801916114ff565b918583038187015281835280830192818360051b820101958589925b858410610d63578a7fa1c3ef280bbac31181188d4beffe370ebae03e08d58a3aa4832b107d540c0a838b8b038ca180f35b9091929394959697601f198282030188528835601e1984360301811215610dbf578301868101919035858111610dbb578036038313610dbb57610dab88928392600195611363565b9a01980196959401929190610d32565b8c80fd5b8b80fd5b8b60059a999a9897988c83821b890135926003928784541692516371e8f36b60e11b815285888201528c818b81875afa8015610ee657610e0d918e8592610ec9575b505015611317565b823b1561047c578f9282868b8a838851958694859363e26d07d360e01b85528401525af18015610ebf57610ea6575b508482528b5220017402000000000000000000000000000000000000000060ff60a01b19825416179055610e7260085442611290565b908d52600688528b8d20556000198114610e9457600101989798969596610cf8565b634e487b7160e01b8c5260118252838cfd5b82919350610eb3906112b3565b61076d578e9138610e3c565b84513d85823e3d90fd5b610edf9250803d106106de576106d081836112dd565b388e610e05565b5050508e51903d90823e3d90fd5b610f00909b919b6112b3565b9938610cef565b8b513d8e823e3d90fd5b8a80fd5b8880fd5b83601260649260208b519362461bcd60e51b85528401528201527f696e76616c6964207265717565737449647300000000000000000000000000006044820152fd5b8480fd5b83823461047c57602036600319011261047c57610f7a61117f565b6001600160a01b0390610f91828554163314611245565b166001600160a01b031982541617905580f35b83823461047c57602036600319011261047c57803567ffffffffffffffff811161020a57610b8892503691016111b0565b50903461020a57606036600319011261020a57610ff061117f565b6024356001600160a01b038082168092036104785760443593818516809503610474578187541661104b575061102533611581565b6001600160a01b0319921682600154161760015581600354161760035582541617905580f35b5162461bcd60e51b8152602081870152601160248201527f6f776e657220616c7265616479207365740000000000000000000000000000006044820152606490fd5b50913461076d578060031936011261076d57506001600160a01b0360209254169051908152f35b50903461020a57602036600319011261020a577fedb9338f4b0faf2b899d2d7f54b90753d2a8ebb34936e381edb91b091c3e45a791356110ff6001600160a01b038554163314611245565b600854908060085582519182526020820152a180f35b9291905034610af3576020366003190112610af357606093829135815260066020522090815491600260ff6001830154169101549284526111558161115f565b6020840152820152f35b6003111561116957565b634e487b7160e01b600052602160045260246000fd5b600435906001600160a01b038216820361119557565b600080fd5b602435906001600160a01b038216820361119557565b9181601f840112156111955782359167ffffffffffffffff8311611195576020838186019501011161119557565b9181601f840112156111955782359167ffffffffffffffff8311611195576020808501948460051b01011161119557565b6024359067ffffffffffffffff8216820361119557565b60203660031901121561153c57600080fd5b9060088210156111695752565b1561124c57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b9190820180921161129d57565b634e487b7160e01b600052601160045260246000fd5b67ffffffffffffffff81116112c757604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff8211176112c757604052565b90816020910312611195575180151581036111955790565b1561131e57565b60405162461bcd60e51b815260206004820152601760248201527f70726f6f6620616c72656164792067656e6572617465640000000000000000006044820152606490fd5b908060209392818452848401376000828201840152601f01601f1916010190565b3d156113bf573d9067ffffffffffffffff82116112c757604051916113b3601f8201601f1916602001846112dd565b82523d6000602084013e565b606090565b156113cb57565b60405162461bcd60e51b815260206004820152601260248201527f73656e64206e6174697665206661696c656400000000000000000000000000006044820152606490fd5b60008181526020906005825260409060ff6003838320015460a01c1660088110156114a85760021480156114d9575b806114c5575b6114bc578381526005835260ff6003838320015460a01c1660088110156114a85760041480611491575b61148857600560039360ff9583525220015460a01c1690565b50505050600590565b50838152600683526002828220015442101561146f565b634e487b7160e01b82526021600452602482fd5b50505050600690565b508381526006835281812054421015611445565b508381526005835260ff6003838320015460a01c1660088110156114a85760031461143f565b90918281527f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83116111955760209260051b809284830137010190565b60405162461bcd60e51b815260206004820152600f60248201527f6e6f7420696d706c656d656e74656400000000000000000000000000000000006044820152606490fd5b600054906001600160a01b0380911691826001600160a01b0319821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a356fea264697066735822122093c7463fa7d52e6fd655a2cbf42d306d127060c8f4abcab2abe5ea64effcada964736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1915,
        "contract": "contracts/core/BrevisRequest.sol:BrevisRequest",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1373,
        "contract": "contracts/core/BrevisRequest.sol:BrevisRequest",
        "label": "feeCollector",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 606,
        "contract": "contracts/core/BrevisRequest.sol:BrevisRequest",
        "label": "requestTimeout",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 609,
        "contract": "contracts/core/BrevisRequest.sol:BrevisRequest",
        "label": "brevisProof",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IBrevisProof)1359"
      },
      {
        "astId": 612,
        "contract": "contracts/core/BrevisRequest.sol:BrevisRequest",
        "label": "brevisEigen",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IBrevisEigen)1315"
      },
      {
        "astId": 646,
        "contract": "contracts/core/BrevisRequest.sol:BrevisRequest",
        "label": "requests",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_bytes32,t_struct(Request)641_storage)"
      },
      {
        "astId": 997,
        "contract": "contracts/core/BrevisRequest.sol:BrevisRequest",
        "label": "requestExts",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_bytes32,t_struct(RequestExt)992_storage)"
      },
      {
        "astId": 1001,
        "contract": "contracts/core/BrevisRequest.sol:BrevisRequest",
        "label": "keccakToMimc",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_bytes32,t_bytes32)"
      },
      {
        "astId": 1003,
        "contract": "contracts/core/BrevisRequest.sol:BrevisRequest",
        "label": "challengeWindow",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 1005,
        "contract": "contracts/core/BrevisRequest.sol:BrevisRequest",
        "label": "responseTimeout",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IBrevisApp)1306": {
        "encoding": "inplace",
        "label": "contract IBrevisApp",
        "numberOfBytes": "20"
      },
      "t_contract(IBrevisEigen)1315": {
        "encoding": "inplace",
        "label": "contract IBrevisEigen",
        "numberOfBytes": "20"
      },
      "t_contract(IBrevisProof)1359": {
        "encoding": "inplace",
        "label": "contract IBrevisProof",
        "numberOfBytes": "20"
      },
      "t_enum(AskForType)984": {
        "encoding": "inplace",
        "label": "enum BrevisRequest.AskForType",
        "numberOfBytes": "1"
      },
      "t_enum(Option)625": {
        "encoding": "inplace",
        "label": "enum BrevisRequest.Option",
        "numberOfBytes": "1"
      },
      "t_enum(RequestStatus)621": {
        "encoding": "inplace",
        "label": "enum BrevisRequest.RequestStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_bytes32,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_bytes32,t_struct(Request)641_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct BrevisRequest.Request)",
        "numberOfBytes": "32",
        "value": "t_struct(Request)641_storage"
      },
      "t_mapping(t_bytes32,t_struct(RequestExt)992_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct BrevisRequest.RequestExt)",
        "numberOfBytes": "32",
        "value": "t_struct(RequestExt)992_storage"
      },
      "t_struct(Request)641_storage": {
        "encoding": "inplace",
        "label": "struct BrevisRequest.Request",
        "members": [
          {
            "astId": 627,
            "contract": "contracts/core/BrevisRequest.sol:BrevisRequest",
            "label": "deadline",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 629,
            "contract": "contracts/core/BrevisRequest.sol:BrevisRequest",
            "label": "fee",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 631,
            "contract": "contracts/core/BrevisRequest.sol:BrevisRequest",
            "label": "refundee",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 634,
            "contract": "contracts/core/BrevisRequest.sol:BrevisRequest",
            "label": "callback",
            "offset": 0,
            "slot": "3",
            "type": "t_contract(IBrevisApp)1306"
          },
          {
            "astId": 637,
            "contract": "contracts/core/BrevisRequest.sol:BrevisRequest",
            "label": "status",
            "offset": 20,
            "slot": "3",
            "type": "t_enum(RequestStatus)621"
          },
          {
            "astId": 640,
            "contract": "contracts/core/BrevisRequest.sol:BrevisRequest",
            "label": "option",
            "offset": 21,
            "slot": "3",
            "type": "t_enum(Option)625"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(RequestExt)992_storage": {
        "encoding": "inplace",
        "label": "struct BrevisRequest.RequestExt",
        "members": [
          {
            "astId": 986,
            "contract": "contracts/core/BrevisRequest.sol:BrevisRequest",
            "label": "canChallengeBefore",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 989,
            "contract": "contracts/core/BrevisRequest.sol:BrevisRequest",
            "label": "askFor",
            "offset": 0,
            "slot": "1",
            "type": "t_enum(AskForType)984"
          },
          {
            "astId": 991,
            "contract": "contracts/core/BrevisRequest.sol:BrevisRequest",
            "label": "shouldRespondBefore",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}